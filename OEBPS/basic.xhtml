<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="generator" content=
"HTML Tidy for Linux (vers 25 March 2009), see www.w3.org" />
<title>www.mannyneira.com: Computers: Universe: UniVerse
Basic</title>
<meta name="author" content="Manny Neira" />
<meta name="description" content=
"'Computers: Universe: UniVerse Basic' - a page from www.mannyneira.com (the mysterious utility wizard), Manny Neira's personal website." />
<meta name="keywords" content=
"manny, neira, personal, website, the, mysterious, utility, wizard, computers, universe, universe, basic" />






</head>
<body>

<h1><span class="path">Computers:
Universe:</span> UniVerse Basic</h1>
<p>BASIC stands for <em>Beginner's All-purpose Symbolic Instruction
Code</em>. It's first implementation was designed by Dartsmouth
University and is now known as <em>Dartsmouth Basic</em>.</p>
<p>It was originally designed as a teaching tool, but its adoption
by the early home computers (such as the little black plastic
Sinclair ZX81, for a long time the world's selling computer)
established it as the best known of all computer languages. The
machine which finally outsold Sinclair, the IBM PC, used to run
GW-BASIC (GW standing for 'Gee Whiz' would you believe) from ROM if
there was no MS-DOS floppy in the drive. Microsoft's heavy
promotion of Visual Basic, and it's integration into the Office
suite, completes the cycle of what is arguably the world's most
successful programming language.</p>
<p>Successful, but much maligned. Many technologists still regard
Basic as a lightweight development language: or as unstructured and
encouraging poor programming practice.</p>
<p>The pity is that these are criticisms based largely on an
understanding of the original Dartsmouth Basic and the various
'home computer' implementations it inspired. Even applied to these
languages, this view is misplaced. These early versions of Basic
aimed to be, above all, to be usable by the novice. They used
interpreters rather than compilers, largely because of the ease
this brought to development and debugging (even now, most debuggers
are essentially interpreters applied to compiled languages,
allowing you to execute code a line at a time and inspect variable
values: which you could do with interpreted Basic without a
debugger). A user completely new to computers would typically be
wrting simple programs within hours of getting his computer home
from the store. Early Basics were designed for <em>beginners</em>,
and was extremely well suited to its task.</p>
<p>The disdain of Basic becomes even more unreasonable, though,
when applied to its modern forms. Good Basic compilers have allowed
Basic programs to attain the speed necessary for serious
applications. Structured programming techniques have long since
become an integral part of the language. It is true that Basic
still supports that bete noire of coding style gurus, the
<code>GOTO</code> unconditional jump, but then so do <code>C</code>
and <code>Pascal</code>: the latter being the language designed
specifically designed to teach structured programming. There is no
obligation to use <code>GOTO</code> in any of these languages,
however.</p>
<p>In short, I am asking you to put aside any preconceptions you
may have about languages with the word <em>Basic</em> in their
names. UniVerse Basic is a particularly strong and well structured
implementation of the language, and retains an astounding ease of
use and transparency: the true heritage of <em>Dartsmouth
Basic</em>.</p>

</body>
</html>
